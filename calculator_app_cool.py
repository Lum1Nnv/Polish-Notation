import customtkinter as ctk
from tkinter import messagebox
from sympy import sympify, SympifyError
import math
import re

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏ –¥–æ–¥–∞—Ç–∫—É
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

# –°—É—á–∞—Å–Ω–∞ –∫–æ–ª—ñ—Ä–Ω–∞ –ø–∞–ª—ñ—Ç—Ä–∞ 2025
COLORS = {
    'primary': '#2E86AB',
    'secondary': '#A23B72',
    'success': '#4CAF50',
    'warning': '#FF7043',
    'error': '#E53935',
    'background': '#1A1A1A',
    'surface': '#2D2D2D',
    'text_primary': '#FFFFFF',
    'text_secondary': '#B0B0B0',
    'accent': '#7EBC59'
}

# --- backend –ª–æ–≥—ñ–∫–∞ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞) ---

def validate_expression(expr):
    stack = []
    for char in expr:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if not stack:
                return "–ü–æ–º–∏–ª–∫–∞: –∑–∞–π–≤–∞ –∑–∞–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞."
            stack.pop()
    if stack:
        return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–∑–∞–∫—Ä–∏—Ç–∞ –¥—É–∂–∫–∞."

    if re.search(r'\(\s*\)', expr):
        return "–ü–æ–º–∏–ª–∫–∞: –ø–æ—Ä–æ–∂–Ω—ñ –¥—É–∂–∫–∏."

    if re.search(r'[+\-*/%^]{2,}', expr):
        return "–ü–æ–º–∏–ª–∫–∞: –¥–≤–∞ –∞–±–æ –±—ñ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—ñ–¥—Ä—è–¥."

    if re.match(r'^[+\-*/%^]', expr.strip()) or re.search(r'[+\-*/%^]$', expr.strip()):
        return "–ü–æ–º–∏–ª–∫–∞: –≤–∏—Ä–∞–∑ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."

    try:
        sympify(expr)
    except (SympifyError, SyntaxError):
        return "–ü–æ–º–∏–ª–∫–∞: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–∏—Ä–∞–∑—ñ."

    return None

def process_with_sympy(expr_str, rng):
    try:
        expr_str = expr_str.replace('arcsin', 'asin').replace('arccos', 'acos') \
            .replace('arctan', 'atan').replace('arccot', 'acot')

        expr = sympify(expr_str)
        free_syms = expr.free_symbols

        if len(free_syms) == 0:
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {expr.evalf()}"

        elif len(free_syms) == 1:
            var = list(free_syms)[0]
            start, end = rng
            results = []
            x = start
            while x <= end:
                val = round(x, 4)
                y = expr.evalf(subs={var: val})
                results.append((val, y))
                x += 0.01
            return results

        else:
            return f"–ü–æ–º–∏–ª–∫–∞: –æ—á—ñ–∫—É—î—Ç—å—Å—è –ª–∏—à–µ –æ–¥–Ω–∞ –∑–º—ñ–Ω–Ω–∞, –∑–Ω–∞–π–¥–µ–Ω–æ: {', '.join(map(str, free_syms))}"

    except SympifyError as e:
        return f"–ü–æ–º–∏–ª–∫–∞ —É –≤–∏—Ä–∞–∑—ñ: {e}"

# --- —Å—É—á–∞—Å–Ω–∏–π –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---

class Plotter:
    def __init__(self, root):
        self.root = root
        self.root.title("üìä –ì—Ä–∞—Ñ—ñ—á–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 2025")
        self.root.geometry("1000x700")
        self.root.minsize(900, 600)
        
        # –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.center_window()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self.create_modern_ui()

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ"""
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1000 // 2)
        y = (self.root.winfo_screenheight() // 2) - (700 // 2)
        self.root.geometry(f"1000x700+{x}+{y}")

    def create_modern_ui(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—É—á–∞—Å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.root, fg_color="transparent")
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            main_frame,
            text="üìä –ì—Ä–∞—Ñ—ñ—á–Ω–∏–π –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
            font=ctk.CTkFont(size=28, weight="bold"),
            text_color=COLORS['text_primary']
        )
        title_label.pack(pady=(0, 20))
        
        # –ö–∞—Ä—Ç–∫–∞ –≤–≤–æ–¥—É
        input_card = ctk.CTkFrame(
            main_frame,
            fg_color=COLORS['surface'],
            corner_radius=16,
            border_width=1,
            border_color=COLORS['primary']
        )
        input_card.pack(fill="x", pady=(0, 20))
        
        # –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        ctk.CTkLabel(
            input_card,
            text="–í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é f(x):",
            font=ctk.CTkFont(size=16),
            text_color=COLORS['text_secondary']
        ).pack(pady=(20, 5))

        # –ü–æ–ª–µ –≤–≤–æ–¥—É —Ñ—É–Ω–∫—Ü—ñ—ó
        self.e_func = ctk.CTkEntry(
            input_card,
            placeholder_text="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: x**2 + 2*x - 1",
            font=ctk.CTkFont(size=14),
            height=40,
            corner_radius=8
        )
        self.e_func.pack(fill="x", padx=20, pady=(0, 15))

        # –§—Ä–µ–π–º –¥–ª—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        range_frame = ctk.CTkFrame(input_card, fg_color="transparent")
        range_frame.pack(pady=(0, 15))

        ctk.CTkLabel(
            range_frame,
            text="–î—ñ–∞–ø–∞–∑–æ–Ω:",
            font=ctk.CTkFont(size=14),
            text_color=COLORS['text_secondary']
        ).pack(pady=(0, 8))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—ñ–≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
        range_container = ctk.CTkFrame(range_frame, fg_color="transparent")
        range_container.pack()

        ctk.CTkLabel(range_container, text="–í—ñ–¥ X =", font=ctk.CTkFont(size=14)).pack(side="left", padx=(0, 5))
        self.e_min = ctk.CTkEntry(range_container, width=80, height=32)
        self.e_min.insert(0, "-10")
        self.e_min.pack(side="left", padx=(0, 20))

        ctk.CTkLabel(range_container, text="–î–æ X =", font=ctk.CTkFont(size=14)).pack(side="left", padx=(0, 5))
        self.e_max = ctk.CTkEntry(range_container, width=80, height=32)
        self.e_max.insert(0, "10")
        self.e_max.pack(side="left")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–±—É–¥–æ–≤–∏
        plot_btn = ctk.CTkButton(
            input_card,
            text="üöÄ –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫",
            font=ctk.CTkFont(size=16, weight="bold"),
            height=45,
            corner_radius=12,
            fg_color=COLORS['primary'],
            hover_color=COLORS['secondary'],
            command=self.plot
        )
        plot_btn.pack(pady=(0, 20))

        # –ö–∞—Ä—Ç–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
        graph_card = ctk.CTkFrame(
            main_frame,
            fg_color=COLORS['surface'],
            corner_radius=16,
            border_width=1,
            border_color=COLORS['accent']
        )
        graph_card.pack(fill="both", expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ—ñ–∫–∞
        ctk.CTkLabel(
            graph_card,
            text="üìà –ì—Ä–∞—Ñ—ñ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color=COLORS['accent']
        ).pack(pady=(15, 5))

        # –ö–∞–Ω–≤–∞—Å –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞
        self.canvas = ctk.CTkCanvas(
            graph_card,
            bg=COLORS['background'],
            highlightthickness=0,
            height=400
        )
        self.canvas.pack(fill="both", expand=True, padx=15, pady=(0, 15))

    def plot(self):
        """–ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑ —Å—É—á–∞—Å–Ω–æ—é –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é)"""
        func = self.e_func.get().strip()

        try:
            xmin = float(self.e_min.get())
            xmax = float(self.e_max.get())
            if xmin >= xmax:
                raise ValueError("xmin –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ xmax")
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –º–µ–∂—ñ X.")
            return

        error = validate_expression(func)
        if error:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error)
            return

        result = process_with_sympy(func, (xmin, xmax))
        if isinstance(result, str):
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", result)
            return

        self.canvas.delete("all")

        w, h = int(self.canvas.winfo_width()) or 800, int(self.canvas.winfo_height()) or 400
        margin = 60
        pw, ph = w - 2 * margin, h - 2 * margin

        raw_points = []
        for x, y in result:
            try:
                fy = float(y)
                if not math.isnan(fy) and not math.isinf(fy):
                    raw_points.append((x, fy))
            except:
                continue

        if not raw_points:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫.")
            return

        # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞) –∑ –≤—ñ–¥–ª–∞–¥–∫–æ—é
        visible_points = [y for x, y in raw_points if abs(y) < 50]  # –ó–±—ñ–ª—å—à–∏–≤ –ª—ñ–º—ñ—Ç –∑ 20 –¥–æ 50
        if not visible_points:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ –≥—Ä–∞—Ñ—ñ–∫—É.")
            return

        ymin = min(visible_points)
        ymax = max(visible_points)
        if ymin == ymax:
            ymin -= 1
            ymax += 1
            
        print(f"–ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞: {len(raw_points)} —Ç–æ—á–æ–∫, ymin={ymin:.2f}, ymax={ymax:.2f}")

        def to_canvas(x, y):
            cx = margin + (x - xmin) / (xmax - xmin) * pw
            cy = margin + (ymax - y) / (ymax - ymin) * ph
            return (cx, cy)

        # –°–µ–≥–º–µ–Ω—Ç—É–≤–∞–Ω–Ω—è (–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞) –∑ –≤—ñ–¥–ª–∞–¥–∫–æ—é
        segments = []
        segment = []

        for i in range(len(raw_points)):
            x, y = raw_points[i]
            if segment:
                y_prev = segment[-1][1]
                if abs(y - y_prev) > 20:  # –ó–±—ñ–ª—å—à–∏–≤ –ø–æ—Ä—ñ–≥ –∑ 10 –¥–æ 20
                    if len(segment) >= 2:
                        segments.append(segment)
                    segment = []
            segment.append((x, y))

        if len(segment) >= 2:
            segments.append(segment)
            
        print(f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤: {len(segments)}")

        # –°—É—á–∞—Å–Ω–∞ —Å—ñ—Ç–∫–∞
        self.draw_modern_grid(w, h, margin, xmin, xmax, ymin, ymax)
        
        # –¢–µ—Å—Ç–æ–≤–∞ –ª—ñ–Ω—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ canvas
        self.canvas.create_line(margin, margin, margin + pw, margin + ph, 
                               fill="#FF0000", width=3, tags="test")

        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ —è—Å–∫—Ä–∞–≤–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ –≤—ñ–¥–ª–∞–¥–∫–æ—é
        for i, seg in enumerate(segments):
            coords = []
            for x, y in seg:
                coords.extend(to_canvas(x, y))
            if len(coords) >= 4:
                print(f"–ú–∞–ª—é—é —Å–µ–≥–º–µ–Ω—Ç {i}: {len(coords)//2} —Ç–æ—á–æ–∫")
                # –û—Å–Ω–æ–≤–Ω–∞ –ª—ñ–Ω—ñ—è - —è—Å–∫—Ä–∞–≤–∞ —Ç–∞ –¥–æ–±—Ä–µ –≤–∏–¥–∏–º–∞
                self.canvas.create_line(coords, fill="#00BFFF", width=4, smooth=True, capstyle="round")
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±–≤–æ–¥–∫–∞ –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ
                self.canvas.create_line(coords, fill="#FFFFFF", width=2, smooth=True)
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –ª—ñ–Ω—ñ—é
        self.canvas.delete("test")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
        self.canvas.create_text(w//2, 25, text=f"f(x) = {func}", 
                               font=("SF Pro Display", 16, "bold"), fill=COLORS['accent'])

    def draw_modern_grid(self, w, h, margin, xmin, xmax, ymin, ymax):
        """–°—É—á–∞—Å–Ω–∞ —Å—ñ—Ç–∫–∞"""
        pw, ph = w - 2 * margin, h - 2 * margin
        
        # –°—ñ—Ç–∫–∞
        for i in range(11):
            x = margin + i * pw / 10
            val = xmin + i * (xmax - xmin) / 10
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó
            self.canvas.create_line(x, margin, x, margin + ph, fill="#444444", width=1)
            self.canvas.create_text(x, margin + ph + 15, text=f"{val:.1f}", 
                                  font=("SF Pro Text", 10), fill=COLORS['text_secondary'])

            y = margin + i * ph / 10
            val = ymax - i * (ymax - ymin) / 10
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó
            self.canvas.create_line(margin, y, margin + pw, y, fill="#444444", width=1)
            self.canvas.create_text(margin - 25, y, text=f"{val:.1f}", 
                                  font=("SF Pro Text", 10), fill=COLORS['text_secondary'])

        # –ì–æ–ª–æ–≤–Ω—ñ –æ—Å—ñ
        if ymin < 0 < ymax:
            y0 = margin + (ymax - 0) / (ymax - ymin) * ph
            self.canvas.create_line(margin, y0, margin + pw, y0, fill=COLORS['text_primary'], width=2)

        if xmin < 0 < xmax:
            x0 = margin + (-xmin) / (xmax - xmin) * pw
            self.canvas.create_line(x0, margin, x0, margin + ph, fill=COLORS['text_primary'], width=2)

def main():
    root = ctk.CTk()
    app = Plotter(root)
    root.mainloop()

if __name__ == "__main__":
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CustomTkinter
    try:
        import customtkinter as ctk
    except ImportError:
        print("‚ùå –î–ª—è —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ CustomTkinter:")
        print("pip install customtkinter")
        exit(1)
        
    main()