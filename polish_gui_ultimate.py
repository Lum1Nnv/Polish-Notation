import tkinter as tk
from tkinter import ttk, messagebox
import math
import re
from sympy import sympify, Symbol, sin, cos, tan, log, sqrt, asin, acos, atan
from sympy.core.sympify import SympifyError
import argparse
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
import numpy as np

# –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤
precedence = {
    '+': 1,
    '-': 1,
    '*': 2,
    '/': 2,
    '^': 3,
    '%': 3,
}

class FunctionSelector:
    """–°–µ–ª–µ–∫—Ç–æ—Ä —Ñ—É–Ω–∫—Ü—ñ–π"""
    
    FUNCTIONS = {
        '–ë–∞–∑–æ–≤—ñ': {
            'x^2': 'x^2',
            'x^3': 'x^3', 
            'x^2+2*x+1': 'x^2+2*x+1',
            '‚àöx': 'sqrt(x)',
            '1/x': '1/x',
            'x': 'x'
        },
        '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω—ñ': {
            'sin(x)': 'sin(x)',
            'cos(x)': 'cos(x)',
            'tan(x)': 'tan(x)',
            'cot(x)': 'cot(x)',
            'sin(2x)': 'sin(2*x)',
            'cos(x/2)': 'cos(x/2)'
        },
        '–û–±–µ—Ä–Ω–µ–Ω—ñ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω—ñ': {
            'arcsin(x)': 'asin(x)',
            'arccos(x)': 'acos(x)',
            'arctan(x)': 'atan(x)',
            'arccot(x)': 'acot(x)'
        },
        '–õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω—ñ': {
            'ln(x)': 'log(x)',
            'log‚ÇÅ‚ÇÄ(x)': 'log(x)/log(10)',
            'log‚ÇÇ(x)': 'log(x)/log(2)'
        }
    }
    
    def __init__(self, parent, callback):
        self.callback = callback
        self.create_selector(parent)
    
    def create_selector(self, parent):
        selector_frame = tk.Frame(parent, bg="#1E1E1E")
        selector_frame.pack(fill="x", pady=(0, 10))
        
        ttk.Label(selector_frame, text="–®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ—ó:", 
                 foreground="white", background="#1E1E1E").pack(anchor="w", pady=(0, 5))
        
        for category, functions in self.FUNCTIONS.items():
            cat_frame = tk.Frame(selector_frame, bg="#1E1E1E")
            cat_frame.pack(fill="x", pady=2)
            
            ttk.Label(cat_frame, text=f"{category}:", 
                     foreground="lightgray", background="#1E1E1E").pack(side="left", padx=(0, 10))
            
            for display_name, func_code in functions.items():
                btn = tk.Button(cat_frame, text=display_name, 
                              command=lambda f=func_code: self.callback(f),
                              bg="#404040", fg="white", font=("Segoe UI", 9),
                              relief="flat", padx=8, pady=2)
                btn.pack(side="left", padx=2)
                btn.bind("<Enter>", lambda e, b=btn: b.config(bg="#505050"))
                btn.bind("<Leave>", lambda e, b=btn: b.config(bg="#404040"))

class Plotter:
    def __init__(self, root, width=900, height=700):
        self.root = root
        self.root.title("–ì—Ä–∞—Ñ—ñ–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π")
        self.root.geometry(f"{width}x{height}")
        self.root.configure(bg="#1E1E1E")
        self.xmin, self.xmax, self.tab = -10, 10, 0
        self.root.state('zoomed')

        self.create_menu()
        self.setup_styles()
        self.create_interface()

    def setup_styles(self):
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TButton", font=("Segoe UI", 10), padding=5, 
                       background="#2E2E2E", foreground="white")
        style.configure("Accent.TButton", background="#28a745", foreground="white")
        style.configure("TLabel", background="#1E1E1E", foreground="white")
        style.configure("TEntry", fieldbackground="#2E2E2E", foreground="white")
        style.configure("TNotebook", background="#1E1E1E", borderwidth=0)
        style.configure("TNotebook.Tab", background="#404040", foreground="white", padding=[12, 8])
        style.map("TNotebook.Tab", background=[("selected", "#28a745")])

    def create_interface(self):
        main_frame = tk.Frame(self.root, bg="#1E1E1E")
        main_frame.pack(fill="both", expand=1, padx=15, pady=15)

        FunctionSelector(main_frame, self.select_function)
        self.create_control_panel(main_frame)
        
        # Create notebook for tabs
        self.nb = ttk.Notebook(main_frame)
        self.nb.pack(fill="both", expand=1)

    def create_control_panel(self, parent):
        control_frame = tk.Frame(parent, bg="#1E1E1E")
        control_frame.pack(fill="x", pady=(0, 10))

        top_row = tk.Frame(control_frame, bg="#1E1E1E")
        top_row.pack(fill="x", pady=(0, 5))

        ttk.Label(top_row, text="f(x):").pack(side="left", padx=(0, 5))
        self.e_func = ttk.Entry(top_row, width=30, font=("Segoe UI", 11))
        self.e_func.pack(side="left", padx=5)

        bottom_row = tk.Frame(control_frame, bg="#1E1E1E")
        bottom_row.pack(fill="x")

        range_frame = tk.Frame(bottom_row, bg="#1E1E1E")
        range_frame.pack(side="left")

        ttk.Label(range_frame, text="–í—ñ–¥:").pack(side="left", padx=(0, 5))
        self.e_min = ttk.Entry(range_frame, width=8)
        self.e_min.pack(side="left", padx=(0, 10))
        self.e_min.insert(0, str(self.xmin))

        ttk.Label(range_frame, text="–î–æ:").pack(side="left", padx=(0, 5))
        self.e_max = ttk.Entry(range_frame, width=8)
        self.e_max.pack(side="left", padx=(0, 15))
        self.e_max.insert(0, str(self.xmax))

        button_frame = tk.Frame(bottom_row, bg="#1E1E1E")
        button_frame.pack(side="left")

        ttk.Button(button_frame, text="‚úì –í–∞–ª—ñ–¥–∞—Ü—ñ—è", 
                  command=self.validate_input, style="Accent.TButton").pack(side="left", padx=2)
        ttk.Button(button_frame, text="‚á® –ü—Ä–µ—Ñ—ñ–∫—Å", 
                  command=self.show_prefix, style="Accent.TButton").pack(side="left", padx=2)
        ttk.Button(button_frame, text="‚àë –û–±—á–∏—Å–ª–∏—Ç–∏", 
                  command=self.show_result, style="Accent.TButton").pack(side="left", padx=2)
        ttk.Button(button_frame, text="üìà –ü–æ–±—É–¥—É–≤–∞—Ç–∏", 
                  command=self.plot_expression, style="Accent.TButton").pack(side="left", padx=2)
        ttk.Button(button_frame, text="üóë –û—á–∏—Å—Ç–∏—Ç–∏", 
                  command=self.clear_function).pack(side="left", padx=2)
        ttk.Button(button_frame, text="‚ùå –ó–∞–∫—Ä–∏—Ç–∏ –≤–∫–ª–∞–¥–∫—É", 
                  command=self.close_current_tab).pack(side="left", padx=2)

    def select_function(self, func_code):
        self.e_func.delete(0, tk.END)
        self.e_func.insert(0, func_code)

    def clear_function(self):
        self.e_func.delete(0, tk.END)

    def close_current_tab(self):
        """–ó–∞–∫—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –∞–∫—Ç–∏–≤–Ω—É –≤–∫–ª–∞–¥–∫—É"""
        try:
            current_tab = self.nb.select()
            if current_tab:
                self.nb.forget(current_tab)
        except tk.TclError:
            pass  # –ù–µ–º–∞—î –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è

    def create_menu(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ –≤–∫–ª–∞–¥–∫–∏", command=self.close_all_tabs)
        file_menu.add_separator()
        file_menu.add_command(label="–í–∏—Ö—ñ–¥", command=self.root.quit)
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–î–æ–≤—ñ–¥–∫–∞", menu=help_menu)
        help_menu.add_command(label="–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", command=self.show_about)

    def close_all_tabs(self):
        for tab_id in self.nb.tabs()[:]:
            self.nb.forget(tab_id)

    def show_about(self):
        messagebox.showinfo("–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É", 
                           "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ—É–Ω–∫—Ü—ñ–π v2.0\n\n"
                           "–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n"
                           "‚Ä¢ –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π\n"
                           "‚Ä¢ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∏—Ä–∞–∑—ñ–≤\n"
                           "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –ø—Ä–µ—Ñ—ñ–∫—Å–Ω—É —Ñ–æ—Ä–º—É\n"
                           "‚Ä¢ –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å\n"
                           "‚Ä¢ –®–≤–∏–¥–∫–∏–π –≤–∏–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ–π\n"
                           "‚Ä¢ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∫–ª–∞–¥–∫–∞–º–∏\n"
                           "118", 
                           parent=self.root)

    def make_tab(self, func=""):
        tab = tk.Frame(self.nb, bg="#2E2E2E")
        canvas = tk.Frame(tab, bg="#2E2E2E")
        canvas.pack(fill="both", expand=1)
        
        # Add tab with cleaner name
        tab_name = func[:15] + "..." if len(func) > 15 else func
        self.nb.add(tab, text=tab_name)
        self.nb.select(tab)
        
        tab.canvas, tab.function = canvas, func
        self.tab += 1
        self.plot(canvas, func)

    def plot_expression(self):
        func = self.e_func.get().strip()
        if not func:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é!", parent=self.root)
            return
        error = self.validate_expression(func)
        if error:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error, icon="error", parent=self.root)
            return
        self.make_tab(func)

    def get_asymptotes(self, func):
        """–ó–Ω–∞–π—Ç–∏ –∞—Å–∏–º–ø—Ç–æ—Ç–∏ —Ç–∞ —Ç–æ—á–∫–∏ —Ä–æ–∑—Ä–∏–≤—É –¥–ª—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        asymptotes = []
        
        if 'tan(' in func:
            n_start = math.ceil((self.xmin - math.pi/2) / math.pi)
            n_end = math.floor((self.xmax - math.pi/2) / math.pi)
            for n in range(n_start, n_end + 1):
                asymptote = math.pi/2 + n * math.pi
                if self.xmin <= asymptote <= self.xmax:
                    asymptotes.append(asymptote)
        
        if 'cot(' in func:
            n_start = math.ceil(self.xmin / math.pi)
            n_end = math.floor(self.xmax / math.pi)
            for n in range(n_start, n_end + 1):
                asymptote = n * math.pi
                if self.xmin <= asymptote <= self.xmax:
                    asymptotes.append(asymptote)
        
        # arccot has no vertical asymptotes
        return asymptotes

    def plot(self, canvas, func):
        try:
            xmin, xmax = float(self.e_min.get()), float(self.e_max.get())
            if xmin >= xmax:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "x_min –º–∞—î –±—É—Ç–∏ –º–µ–Ω—à–µ x_max!", parent=self.root)
                return

            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—é seaborn
            sns.set_style("darkgrid", {"axes.facecolor": "#2E2E2E", "figure.facecolor": "#2E2E2E"})
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∏
            fig, ax = plt.subplots(figsize=(8, 6), dpi=100)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞—Å–∏–º–ø—Ç–æ—Ç–∏
            asymptotes = self.get_asymptotes(func)
            
            # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
            x_vals = np.linspace(xmin, xmax, 10000)
            self.plot_with_asymptotes(ax, x_vals, func, asymptotes)
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
            ax.set_title(f"f(x) = {func}", color='white', fontsize=14, pad=10)
            ax.set_xlabel("x", color='white', fontsize=12)
            ax.set_ylabel("f(x)", color='white', fontsize=12)
            ax.tick_params(colors='white', labelsize=10)
            ax.grid(True, which="both", linestyle='--', linewidth=0.7, alpha=0.7, color='gray')
            ax.axhline(y=0, color='white', linewidth=2.5, zorder=0)
            ax.axvline(x=0, color='white', linewidth=2.5, zorder=0)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–∂
            ax.set_xlim(xmin, xmax)
            if 'tan(' in func or 'cot(' in func:
                ax.set_ylim(-10, 10)
            else:
                # –î–∏–Ω–∞–º—ñ—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –ø–æ –æ—Å—ñ Y
                y_vals = np.array([self.safe_eval(func, x) for x in x_vals])
                valid_y = y_vals[np.isfinite(y_vals)]
                if valid_y.size > 0:
                    y_range = np.ptp(valid_y) if np.ptp(valid_y) > 0 else 1
                    y_center = np.mean(valid_y)
                    margin = y_range * 0.1 or 1
                    ax.set_ylim(y_center - y_range/2 - margin, y_center + y_range/2 + margin)
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞—Å–∏–º–ø—Ç–æ—Ç
            for asymptote in asymptotes:
                ax.axvline(x=asymptote, color='red', linestyle='--', alpha=0.7, linewidth=1)
            
            plt.tight_layout()

            # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–º—ñ—Å—Ç—É –∫–∞–Ω–≤–∏
            for child in canvas.winfo_children():
                child.destroy()

            # –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Tkinter
            graph = FigureCanvasTkAgg(fig, master=canvas)
            graph.get_tk_widget().pack(fill="both", expand=True)
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
            toolbar = NavigationToolbar2Tk(graph, canvas)
            toolbar.update()
            toolbar.pack(side=tk.TOP, fill=tk.X)

            # –ü—Ä–∏–≤'—è–∑–∫–∞ –ø–æ–¥—ñ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—à—ñ
            graph.get_tk_widget().bind("<MouseWheel>", lambda event: self.zoom(event, ax, graph))
            graph.get_tk_widget().bind("<Button-4>", lambda event: self.zoom(event, ax, graph))  # –î–ª—è Linux
            graph.get_tk_widget().bind("<Button-5>", lambda event: self.zoom(event, ax, graph))  # –î–ª—è Linux

            graph.draw()

        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–∂: {str(e)}", parent=self.root)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–≥–ª—è–¥–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫—É: {str(e)}", parent=self.root)

    def zoom(self, event, ax, canvas):
        # –§–∞–∫—Ç–æ—Ä –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        zoom_factor = 1.1 if event.delta > 0 or event.num == 4 else 0.9 if event.delta < 0 or event.num == 5 else 1.0
        
        # –ü–æ—Ç–æ—á–Ω—ñ –º–µ–∂—ñ –æ—Å–µ–π
        x_min, x_max = ax.get_xlim()
        y_min, y_max = ax.get_ylim()
        
        # –¶–µ–Ω—Ç—Ä –≥—Ä–∞—Ñ—ñ–∫—É
        x_center = (x_min + x_max) / 2
        y_center = (y_min + y_max) / 2
        
        # –ù–æ–≤—ñ –º–µ–∂—ñ –ø—ñ—Å–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
        x_range = (x_max - x_min) * zoom_factor
        y_range = (y_max - y_min) * zoom_factor
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–∂ –≥—Ä–∞—Ñ—ñ–∫–∞
        new_x_min = x_center - x_range / 2
        new_x_max = x_center + x_range / 2
        ax.set_xlim(new_x_min, new_x_max)
        ax.set_ylim(y_center - y_range / 2, y_center + y_range / 2)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ "–í—ñ–¥" —ñ "–î–æ"
        self.e_min.delete(0, tk.END)
        self.e_min.insert(0, f"{new_x_min:.2f}")
        self.e_max.delete(0, tk.END)
        self.e_max.insert(0, f"{new_x_max:.2f}")
        
        canvas.draw()

    def plot_with_asymptotes(self, ax, x_vals, func, asymptotes):
        """–ú–∞–ª—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∞—Å–∏–º–ø—Ç–æ—Ç —Ç–∞ —Ç–æ—á–æ–∫ —Ä–æ–∑—Ä–∏–≤—É"""
        split_points = sorted(asymptotes + [x_vals[0] - 1, x_vals[-1] + 1]) if asymptotes else [x_vals[0] - 1, x_vals[-1] + 1]
        segments = []
        tolerance = (x_vals[-1] - x_vals[0]) / 10000
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ –º—ñ–∂ –∞—Å–∏–º–ø—Ç–æ—Ç–∞–º–∏
        for i in range(len(split_points) - 1):
            start, end = split_points[i], split_points[i + 1]
            start_idx = np.searchsorted(x_vals, start, side='right')
            end_idx = np.searchsorted(x_vals, end, side='left')
            
            if start_idx < end_idx and start_idx < len(x_vals) and end_idx > 0:
                if i > 0:
                    start_val = split_points[i] + tolerance
                    start_idx = np.searchsorted(x_vals, start_val, side='right')
                if i < len(split_points) - 2:
                    end_val = split_points[i + 1] - tolerance
                    end_idx = np.searchsorted(x_vals, end_val, side='left')
                
                if start_idx < end_idx:
                    segments.append((start_idx, end_idx))
        
        # –ü–æ–±—É–¥–æ–≤–∞ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤
        for start_idx, end_idx in segments:
            x_segment = x_vals[start_idx:end_idx]
            if len(x_segment) == 0:
                continue
            
            y_segment = np.array([self.safe_eval(func, x) for x in x_segment])
            valid_mask = np.logical_not(np.isnan(y_segment)) & (np.abs(y_segment) < 10000)
            
            if np.any(valid_mask):
                x_valid = x_segment[valid_mask]
                y_valid = y_segment[valid_mask]
                if len(x_valid) > 1:
                    ax.plot(x_valid, y_valid, color='cyan', linewidth=2, label=f"f(x) = {func}" if start_idx == segments[0][0] else "")
        
        if segments:
            ax.legend(loc='best', fontsize=10, facecolor='#2E2E2E', edgecolor='white', labelcolor='white')

    def safe_eval(self, expr, x):
        try:
            # Preprocessing: replace function names and operators
            expr = expr.replace('^', '**')
        
            # Handle logarithmic functions first (before arcsin/arccos replacements)
            expr = expr.replace('ln(', 'log(')  # ln -> log (natural log)
            expr = expr.replace('log‚ÇÅ‚ÇÄ(', 'log10(')  # log base 10
            expr = expr.replace('log‚ÇÇ(', 'log2(')   # log base 2
        
            # Handle inverse trig functions
            expr = expr.replace('arcsin(', 'asin(')
            expr = expr.replace('arccos(', 'acos(')
            expr = expr.replace('arctan(', 'atan(')
            expr = expr.replace('arccot(', 'acot(')

            # Safe function dictionary
            safe_locals = {
                "x": x,
                "abs": abs,
                "pow": pow,
                "pi": math.pi,  
                "e": math.e,
                "sin": math.sin,
                "cos": math.cos,
                "tan": lambda val: math.tan(val) if abs(math.cos(val)) > 1e-10 else float('nan'),
                "cot": lambda val: 1/math.tan(val) if abs(math.sin(val)) > 1e-10 else float('nan'),
                "asin": lambda val: math.asin(val) if -1 <= val <= 1 else float('nan'),
                "acos": lambda val: math.acos(val) if -1 <= val <= 1 else float('nan'),
                "atan": math.atan,
                "acot": lambda val: math.pi/2 - math.atan(val),
                "log": lambda val: math.log(val) if val > 0 else float('nan'),  # Natural log
                "log10": lambda val: math.log10(val) if val > 0 else float('nan'),  # Log base 10
                "log2": lambda val: math.log2(val) if val > 0 else float('nan'),   # Log base 2
                "sqrt": lambda val: math.sqrt(val) if val >= 0 else float('nan'),
                "exp": lambda val: math.exp(val) if abs(val) < 700 else (float('inf') if val > 0 else 0)
            }

            # Evaluate expression
            result = eval(expr, {"__builtins__": {}}, safe_locals)
        
            # Check and return result
            if isinstance(result, (int, float)):
                if math.isnan(result) or math.isinf(result):
                    return float('nan')  # Return NaN for undefined or infinite results
                elif abs(result) > 1e6:  # Limit very large values
                    return float('nan')
                else:
                    return round(result, 6)
            else:
                return float('nan')
            
        except (ZeroDivisionError, ValueError, OverflowError, TypeError, SyntaxError):
            return float('nan')
        except Exception:
            return float('nan')

    def validate_input(self):
        expr = self.e_func.get().strip()
        if not expr:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é!", parent=self.root)
            return
        error = self.validate_expression(expr)
        if error:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error, icon="error", parent=self.root)
        else:
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–í–∏—Ä–∞–∑ –≤–∞–ª—ñ–¥–Ω–∏–π!", parent=self.root)

    def validate_expression(self, expr):
        stack = []
        for char in expr:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return "–ü–æ–º–∏–ª–∫–∞: –∑–∞–π–≤–∞ –∑–∞–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞."
                stack.pop()
        if stack:
            return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ–∑–∞–∫—Ä–∏—Ç–∞ –¥—É–∂–∫–∞."
        if re.search(r'\(\s*\)', expr):
            return "–ü–æ–º–∏–ª–∫–∞: –ø–æ—Ä–æ–∂–Ω—ñ –¥—É–∂–∫–∏."
        if re.search(r'[+\-*/%^]{2,}', expr):
            return "–ü–æ–º–∏–ª–∫–∞: –¥–≤–∞ –∞–±–æ –±—ñ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—ñ–¥—Ä—è–¥."
        if re.match(r'^[+\-*/%^]', expr.strip()) or re.search(r'[+\-*/%^]$', expr.strip()):
            return "–ü–æ–º–∏–ª–∫–∞: –≤–∏—Ä–∞–∑ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."
        try:
            expr = (expr.replace('^', '**')
                       .replace('arcsin', 'asin')
                       .replace('arccos', 'acos')
                       .replace('arctan', 'atan')
                       .replace('arccot', 'acot')
                       .replace('cot', '1/tan'))
            sympify(expr, locals={'x': Symbol('x'), 'cot': 1/Symbol('tan')})
        except (SympifyError, SyntaxError):
            return "–ü–æ–º–∏–ª–∫–∞: —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —É –≤–∏—Ä–∞–∑—ñ."
        return None

    def infix_to_prefix(self, expression):
        def is_operator(token):
            return token in precedence

        def greater_precedence(op1, op2):
            return precedence[op1] >= precedence[op2]

        def tokenize(expr):
            tokens = []
            i = 0
            funcs = {'sin', 'cos', 'tan', 'cot', 'log', 'asin', 'acos', 'atan', 'acot', 'sqrt', 'exp'}
            while i < len(expr):
                if expr[i].isspace():
                    i += 1
                    continue
                if expr[i].isalpha():
                    ident = ''
                    while i < len(expr) and expr[i].isalpha():
                        ident += expr[i]
                        i += 1
                    if ident in funcs:
                        if i < len(expr) and expr[i] == '(':
                            tokens.append(ident)
                        else:
                            tokens.append(ident)
                    else:
                        tokens.append(ident)
                    continue
                if expr[i].isdigit() or expr[i] == '.':
                    num = ''
                    while i < len(expr) and (expr[i].isdigit() or expr[i] == '.'):
                        num += expr[i]
                        i += 1
                    tokens.append(num)
                    continue
                if expr[i] in '+-*/%^()':
                    tokens.append(expr[i])
                    i += 1
                    continue
                raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–∏–º–≤–æ–ª: {expr[i]}")
            return tokens

        def to_prefix(tokens):
            stack = []
            output = []
            i = 0
            while i < len(tokens):
                token = tokens[i]
                if token.isalnum() or re.match(r'^\d+\.?\d*$', token) or token == 'x':
                    output.append(token)
                elif token in {'sin', 'cos', 'tan', 'cot', 'log', 'asin', 'acos', 'atan', 'acot', 'sqrt', 'exp'}:
                    stack.append(token)
                elif token == '(':
                    stack.append(token)
                elif token == ')':
                    while stack and stack[-1] != '(':
                        output.append(stack.pop())
                    if stack and stack[-1] == '(':
                        stack.pop()
                        if stack and stack[-1] in {'sin', 'cos', 'tan', 'cot', 'log', 'asin', 'acos', 'atan', 'acot', 'sqrt', 'exp'}:
                            output.append(stack.pop())
                elif is_operator(token):
                    while (stack and stack[-1] != '(' and 
                           greater_precedence(stack[-1], token)):
                        output.append(stack.pop())
                    stack.append(token)
                i += 1
            while stack:
                output.append(stack.pop())
            # Reverse to get prefix notation
            return ' '.join(reversed(output))

        try:
            tokens = tokenize(expression)
            return to_prefix(tokens)
        except Exception as e:
            raise ValueError(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")

    def process_with_sympy(self, expr_str, rng):
        try:
            start, end = rng
            results = []
        
            # –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–≤–Ω–æ 100 –∑–Ω–∞—á–µ–Ω—å
            num_points = 100
            step = (end - start) / (num_points - 1) if num_points > 1 else 0
        
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤ –≤–∏—Ä–∞–∑—ñ –∑–º—ñ–Ω–Ω–∞ x
            if 'x' not in expr_str:
                try:
                    result_value = self.safe_eval(expr_str, 0)
                    if result_value is not None and not math.isnan(result_value):
                        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result_value}"
                    else:
                        return "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–±—á–∏—Å–ª–∏—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É"
                except Exception as e:
                    return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏: {str(e)}"
        
            # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –∑–º—ñ–Ω–Ω–æ—é x
            for i in range(num_points):
                x_val = start + i * step
                val = round(x_val, 2)
            
                try:
                    y = self.safe_eval(expr_str, x_val)
                    if y is not None and not math.isnan(y):
                        results.append((val, y))
                except Exception:
                    continue
        
            return results if results else "–ü–æ–º–∏–ª–∫–∞: —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤ –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ"
        
        except Exception as e:
            return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ: {str(e)}"

    def show_prefix(self):
        expr = self.e_func.get().strip()
        if not expr:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é!", parent=self.root)
            return
        error = self.validate_expression(expr)
        if error:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error, icon="error", parent=self.root)
            return
        try:
            prefix_expr = self.infix_to_prefix(expr)
            messagebox.showinfo("–ü—Ä–µ—Ñ—ñ–∫—Å–Ω–∞ —Ñ–æ—Ä–º–∞", f"–ü—Ä–µ—Ñ—ñ–∫—Å–Ω–∞ —Ñ–æ—Ä–º–∞: {prefix_expr}", parent=self.root)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {str(e)}", icon="error", parent=self.root)

    def show_result(self):
        expr = self.e_func.get().strip()
        if not expr:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–í–≤–µ–¥—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é!", parent=self.root)
            return
        error = self.validate_expression(expr)
        if error:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", error, icon="error", parent=self.root)
            return
        try:
            rng = (float(self.e_min.get()), float(self.e_max.get()))
            result = self.process_with_sympy(expr, rng)
            if isinstance(result, str):
                messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", result, parent=self.root)
            else:
                formatted_results = []
                for x, y in result[:10]:
                    if y is None or math.isnan(y):
                        y_str = "–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"
                    elif math.isinf(y):
                        y_str = "‚àû" if y > 0 else "-‚àû"
                    elif isinstance(y, complex):
                        if abs(y.imag) < 1e-10:
                            y_str = f"{y.real:.4f}"
                        else:
                            y_str = f"{y.real:.4f} + {y.imag:.4f}i"
                    elif isinstance(y, (int, float)):
                        y_str = f"{y:.4f}"
                    else:
                        y_str = str(y)
                    formatted_results.append(f"x={x:.2f}, y={y_str}")
            
                result_text = "\n".join(formatted_results)
                if len(result) > 10:
                    result_text += f"\n... —Ç–∞ —â–µ {len(result)-10} –∑–Ω–∞—á–µ–Ω—å"
            
                messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω—å", result_text, parent=self.root)
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ: {str(e)}", icon="error", parent=self.root)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∏—Ä–∞–∑—ñ–≤ —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç')
    parser.add_argument("--value", "-v", dest="value", type=str, default="sin(x)")
    parser.add_argument("--rng", nargs=2, type=float, metavar=('START', 'END'), default=[-10.0, 10.0])
    args = parser.parse_args()
    input_expr = args.value
    rng = args.rng

    root = tk.Tk()
    app = Plotter(root)
    app.e_func.insert(0, input_expr)
    app.e_min.delete(0, tk.END)
    app.e_max.delete(0, tk.END)
    app.e_min.insert(0, str(rng[0]))
    app.e_max.insert(0, str(rng[1]))
    app.plot_expression()
    root.mainloop()